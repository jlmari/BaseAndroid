// Generated by Dagger (https://dagger.dev).
package com.jlmari.baseandroid.application.di;

import android.content.Context;
import com.jlmari.baseandroid.application.App;
import com.jlmari.baseandroid.base.views.BaseActivity_MembersInjector;
import com.jlmari.baseandroid.main.di.MainComponent;
import com.jlmari.baseandroid.main.MainActivity;
import com.jlmari.presentation.main.MainContract;
import com.jlmari.presentation.main.presenter.MainPresenter_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private Provider<Context> provideContext$app_debugProvider;

  private DaggerAppComponent(AppModule appModuleParam) {

    initialize(appModuleParam);
  }

  public static Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam) {
    this.provideContext$app_debugProvider = DoubleCheck.provider(AppModule_ProvideContext$app_debugFactory.create(appModuleParam));
  }

  @Override
  public void inject(App app) {
  }

  @Override
  public Context getContext() {
    return provideContext$app_debugProvider.get();
  }

  @Override
  public MainComponent.Builder mainComponentBuilder() {
    return new MainComponentBuilder();
  }

  public static final class Builder {
    private AppModule appModule;

    private Builder() {
    }

    public Builder appModule(AppModule appModule) {
      this.appModule = Preconditions.checkNotNull(appModule);
      return this;
    }

    public AppComponent build() {
      Preconditions.checkBuilderRequirement(appModule, AppModule.class);
      return new DaggerAppComponent(appModule);
    }
  }

  private final class MainComponentBuilder implements MainComponent.Builder {
    @Override
    public MainComponent build() {
      return new MainComponentImpl();
    }
  }

  private final class MainComponentImpl implements MainComponent {
    private Provider<MainContract.Presenter> bindsPresenter$app_debugProvider;

    private MainComponentImpl() {

      initialize();
    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.bindsPresenter$app_debugProvider = DoubleCheck.provider((Provider) MainPresenter_Factory.create());
    }

    @Override
    public void inject(MainActivity activity) {
      injectMainActivity(activity);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectPresenter(instance, bindsPresenter$app_debugProvider.get());
      return instance;
    }
  }
}
