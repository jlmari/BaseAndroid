// Generated by Dagger (https://dagger.dev).
package com.jlmari.baseandroid.base.views;

import com.jlmari.baseandroid.base.BaseActivity;
import com.jlmari.presentation.base.BaseContract;
import dagger.MembersInjector;
import dagger.internal.InjectedFieldSignature;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class BaseActivity_MembersInjector<V extends BaseContract.View, R extends BaseContract.Router, P extends BaseContract.Presenter<? super V, ? super R>> implements MembersInjector<BaseActivity<V, R, P>> {
  private final Provider<P> presenterProvider;

  public BaseActivity_MembersInjector(Provider<P> presenterProvider) {
    this.presenterProvider = presenterProvider;
  }

  public static <V extends BaseContract.View, R extends BaseContract.Router, P extends BaseContract.Presenter<? super V, ? super R>> MembersInjector<BaseActivity<V, R, P>> create(
      Provider<P> presenterProvider) {
    return new BaseActivity_MembersInjector<V, R, P>(presenterProvider);
  }

  @Override
  public void injectMembers(BaseActivity<V, R, P> instance) {
    injectPresenter(instance, presenterProvider.get());
  }

  @InjectedFieldSignature("com.jlmari.baseandroid.base.BaseActivity.presenter")
  public static <V extends BaseContract.View, R extends BaseContract.Router, P extends BaseContract.Presenter<? super V, ? super R>> void injectPresenter(
      BaseActivity<V, R, P> instance, P presenter) {
    instance.presenter = presenter;
  }
}
